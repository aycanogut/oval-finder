// font-stack

// font-family

// aileron
$font-aileron: "Aileron";

// inter
$font-inter-regular: "Inter Regular";
$font-inter-medium: "Inter Medium";
$font-inter-semibold: "Inter SemiBold";
$font-inter-bold: "Inter Bold";

// manrope
$font-manrope-extralight: "Manrope ExtraLight";
$font-manrope-light: "Manrope Light";
$font-manrope-semibold: "Manrope SemiBold";
$font-manrope-bold: "Manrope Bold";
$font-manrope-extrabold: "Manrope ExtraBold";

// poppins
$font-poppins: "Poppins SemiBold";

// roboto
$font-roboto: "Roboto";

// font-weight
$extralight: 200;
$light: 300;
$regular: 400;
$medium: 500;
$semibold: 600;
$bold: 700;
$extrabold: 800;

// font-size
$font-9: 9px;
$font-12: 12px;
$font-13: 13px;
$font-14: 14px;
$font-16: 16px;
$font-17: 17px;
$font-18: 18px;
$font-20: 20px;
$font-22: 22px;
$font-24: 24px;
$font-26: 26px;
$font-28: 28px;
$font-30: 30px;
$font-32: 32px;
$font-33: 33px;
$font-34: 34px;
$font-36: 36px;
$font-42: 42px;
$font-44: 44px;
$font-46: 46px;
$font-48: 48px;
$font-56: 56px;
$font-64: 64px;
$font-72: 72px;

// font-path
$font-path: "../assets/fonts" !default;

// font-file-names
$font-file-aileron: "Aileron-Regular";
$font-file-inter-regular: "Inter-Regular";
$font-file-inter-medium: "Inter-Medium";
$font-file-inter-semibold: "Inter-SemiBold";
$font-file-inter-bold: "Inter-Bold";
$font-file-manrope-extralight: "Manrope-ExtraLight";
$font-file-manrope-light: "Manrope-Light";
$font-file-manrope-semibold: "Manrope-SemiBold";
$font-file-manrope-bold: "Manrope-Bold";
$font-file-manrope-extrabold: "Manrope-ExtraBold";
$font-file-poppins: "Poppins-SemiBold";
$font-file-roboto: "Roboto-Regular";

// font-stack
$base-url: "/public/";
$used-fonts: ();

$base-font-stack: (
  // !font-aileron
  aileron:
    (
      regular: (
        family: (
          Aileron,
          sans-serif,
        ),
        weight: $regular,
        style: normal,
        font-face: (
          family: Aileron,
          path: "../assets/fonts/Aileron-Regular",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
    ),
  // !font-inter
  inter:
    (
      regular: (
        family: (
          Inter Regular,
          sans-serif,
        ),
        weight: $regular,
        style: normal,
        font-face: (
          family: Inter Regular,
          path: "../assets/fonts/Inter-Regular",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
      medium: (
        family: (
          Inter Medium,
          sans-serif,
        ),
        weight: $medium,
        style: normal,
        font-face: (
          family: Inter Medium,
          path: "../assets/fonts/Inter-Medium",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
      semibold: (
        family: (
          Inter SemiBold,
          sans-serif,
        ),
        weight: $semibold,
        style: normal,
        font-face: (
          family: Inter SemiBold,
          path: "../assets/fonts/Inter-SemiBold",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
      bold: (
        family: (
          Inter Bold,
          sans-serif,
        ),
        weight: $bold,
        style: normal,
        font-face: (
          family: Inter Bold,
          path: "../assets/fonts/Inter-Bold",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
    ),
  // !font-manrope
  manrope:
    (
      extralight: (
        family: (
          Manrope ExtraLight,
          sans-serif,
        ),
        weight: $extralight,
        style: normal,
        font-face: (
          family: Manrope ExtraLight,
          path: "../assets/fonts/Manrope-ExtraLight",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
      light: (
        family: (
          Manrope Light,
          sans-serif,
        ),
        weight: $light,
        style: normal,
        font-face: (
          family: Manrope Light,
          path: "../assets/fonts/Manrope-Light",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
      semibold: (
        family: (
          Manrope SemiBold,
          sans-serif,
        ),
        weight: $semibold,
        style: normal,
        font-face: (
          family: Manrope SemiBold,
          path: "../assets/fonts/Manrope-SemiBold",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
      bold: (
        family: (
          Manrope Bold,
          sans-serif,
        ),
        weight: $bold,
        style: normal,
        font-face: (
          family: Manrope Bold,
          path: "../assets/fonts/Manrope-Bold",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
      extrabold: (
        family: (
          Manrope ExtraBold,
          sans-serif,
        ),
        weight: $extrabold,
        style: normal,
        font-face: (
          family: Manrope ExtraBold,
          path: "../assets/fonts/Manrope-ExtraBold",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
    ),
  poppins: (
    semibold: (
      family: (
        Poppins SemiBold,
        sans-serif,
      ),
      weight: $semibold,
      style: normal,
      font-face: (
        family: Poppins SemiBold,
        path: "../assets/fonts/Poppins-SemiBold",
        formats: (
          woff2 woff ttf,
        ),
      ),
    ),
  ),
  // !font-roboto
  roboto:
    (
      regular: (
        family: (
          Roboto,
          sans-serif,
        ),
        weight: $regular,
        style: normal,
        font-face: (
          family: Roboto,
          path: "../assets/fonts/Roboto",
          formats: (
            woff2 woff ttf,
          ),
        ),
      ),
    )
);

/// Fetch nested keys
///
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
///
/// @return {*}
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    @if type-of($map) != "map" {
      @warn '`#{$map}` is not a map.';
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return $map;
}

/// Checks if a list contains a value(s).
///
/// @param {List} $list - The list to check against.
/// @param {List} $values - A single value or list of values to check for.
///
/// @example
///   contains($list, $value)
///
/// @return {Bool}
@function contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != "number" {
      @return false;
    }
  }

  @return true;
}

/// Returns URL to a font based on its path
///
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return url($base + "fonts/" + $path);
}

/// Font styling shorthand
///
/// @param {String} $group
/// @param {String} $variant
/// @param {Map} $properties
/// @param {Map} $font-stack (optional)
///
/// @example
///  @include font(helvetica, bold);
///
/// @requires {function} font-properties
@mixin font(
  $group,
  $variant: regular,
  $properties: family weight style,
  $font-stack: $base-font-stack
) {
  $font-properties: map-deep-get($font-stack, $group, $variant);

  @if $font-properties {
    @include track-fonts($group, $variant);
    @each $key, $value in $font-properties {
      @if contains($properties, $key) {
        font-#{$key}: $value;
      }
    }
  }
}

/// Track all fonts and variations used in the stylesheet
/// Check if this combination already exists in the map.
/// If not, we add it to the map.
///
/// @param {String} $group
/// @param {String} $variant
///
/// @requires {Map} used-fonts
@mixin track-fonts($group, $variant) {
  // First check if we already knew this one:
  @if map-has-key($used-fonts, $group) == false {
    // Font-family isn't in the map yet, so add it.
    // The key for the nested map is the font name:
    $used-fonts: map-merge(
      $used-fonts,
      (
        $group: (),
      )
    ) !global;
  }

  // Now check if the variation is known
  $font-map: map-get($used-fonts, $group);
  @if index($font-map, $variant) == null {
    // Variation isn't in the map yet, so add it:
    $variations: append($font-map, $variant);
    $used-fonts: map-merge(
      $used-fonts,
      (
        $group: $variations,
      )
    ) !global;
  }
}

/// Add the font-face rules for all used fonts
/// @return {String} font-face rules
///
/// @requires {function} map-deep-get
/// @requires {function} font-face
@mixin import-fonts($font-stack: $base-font-stack) {
  @each $group, $variations in $used-fonts {
    @each $variant in $variations {
      $font-properties: map-deep-get($font-stack, $group, $variant);

      @if $font-properties {
        // If we have a font-face key we create the font-face rule
        $font-face: map-get($font-properties, font-face);
        @if $font-face {
          $font-family: map-get($font-face, family);
          $file-path: map-get($font-face, path);
          $file-formats: map-get($font-face, formats);
          $font-weight: map-get($font-properties, weight);
          $font-style: map-get($font-properties, style);

          @if $file-formats {
            @include font-face(
              $font-family,
              $file-path,
              $font-weight,
              $font-style,
              $file-formats
            );
          } @else {
            @include font-face(
              $font-family,
              $file-path,
              $font-weight,
              $font-style
            );
          }
        }
      }
    }
  }
}

/// Add a font-face rule
/// @return {String} font-face rule
///
/// @requires {function} font-source-declaration
@mixin font-face(
  $font-family,
  $file-path,
  $font-weight: 400,
  $font-style: normal,
  $file-formats: eot woff2 woff ttf svg
) {
  @font-face {
    font-family: $font-family;
    font-style: $font-style;
    font-weight: $font-weight;

    src: font-source-declaration($font-family, $file-path, $file-formats);
  }
}

/// Used for creating the source string for fonts using @font-face
/// Reference: http://goo.gl/Ru1bKP
///
/// @requires {function} font
@function font-source-declaration($font-family, $file-path, $file-formats) {
  $src: ();

  $formats-map: (
    eot: "#{$file-path}.eot?#iefix"format("embedded-opentype"),
    woff2: "#{$file-path}.woff2"format("woff2"),
    woff: "#{$file-path}.woff"format("woff"),
    ttf: "#{$file-path}.ttf"format("truetype"),
    svg: "#{$file-path}.svg##{$font-family}"format("svg"),
  );

  @each $key, $values in $formats-map {
    @if contains($file-formats, $key) {
      $file-path: nth($values, 1);
      $font-format: nth($values, 2);
      $src: append($src, font($file-path) $font-format, comma);
    }
  }

  @return $src;
}

/// CSS declaration
// h1 {
//   @include font(helvetica, bold);
// }

// h1 .caption {
//   @include font(helvetica, light-italic, weight style);
// }

// p {
//   @include font(helvetica, regular);
// }

// p i {
//   @include font(helvetica, regular-italic, style);
// }

// p b {
//   @include font(helvetica, bold, weight);
// }

// blockquote {
//   @include font(georgia);
// }

/// Import fonts
@include import-fonts();
